{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/personal/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\nimport { phonePattern1 } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nexport default function RSVPPersonal(props) {\n  var _useOvermind = useOvermind(),\n      state = _useOvermind.state,\n      actions = _useOvermind.actions;\n\n  var _useForm = useForm({\n    mode: 'onChange',\n    validateCriteriaMode: \"all\"\n  }),\n      register = _useForm.register,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      formState = _useForm.formState;\n\n  noKtur;\n  var watchNoKtur = watch('noKtur');\n  var watchNoSID = watch('npSID');\n  var watchHidCaptcha = watch('hidGRecaptchaElement');\n\n  var onSubmit = function onSubmit(data, e) {\n    console.log(\"Form submitted \", data, e);\n  };\n\n  var isSIDKTPVerified = false; // Similar to componentDidMount and componentDidUpdate:\n\n  useEffect(function () {\n    if (!window.grecaptcha) reCaptchaInitialize('v2'); // console.log('watchHidCaptcha', watchHidCaptcha);\n  }, [watchHidCaptcha]);\n  useEffect(function () {\n    if (isSIDKTPVerified) {\n      state.rsvp.isSIDKTPVerified = true; // verifyCaptcha\n\n      verifyCaptcha('hidGRecaptchaElement');\n    }\n\n    console.log('watchNoKtur', watchNoKtur);\n    console.log('watchNoSID', watchNoSID);\n\n    if (watchNoKtur && watchNoSID) {\n      console.log('trigger api call to verify use is having valid sid and ktp ');\n    }\n  });\n  return __jsx(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Personal\"), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"noKtur\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"No KTUR \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: \"noKtur\",\n    name: \"noKtur\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"noKtur\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"noSID\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"No SID/AKSes.KSEI \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: \"noSID\",\n    name: \"noSID\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"noSID\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }))), isSIDKTPVerified ? __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"name\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Nama \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"name\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"passport\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"NIK (KTP)/Passport \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"passport\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"passport\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"passport\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"address\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Address \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"address\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"numberOfShares\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Jumlah Saham (sesuai KTUR) \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"numberOfShares\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"numberOfShares\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"numberOfShares\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"phoneNumber\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Phone/Mobile \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"phoneNumber\",\n    ref: register({\n      required: 'This is required.',\n      pattern: {\n        value: phonePattern1,\n        message: \"Invalid phone number\"\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"phoneNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"phoneNumber\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, function (_ref) {\n    var messages = _ref.messages;\n    return messages && Object.entries(messages).map(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          type = _ref3[0],\n          message = _ref3[1];\n\n      return __jsx(\"p\", {\n        key: type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, message);\n    });\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: \"email\",\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Email \", __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"*\")), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"email\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    id: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Upload ID\"), \"No file chosen\", __jsx(\"input\", {\n    name: \"uploadID\",\n    ref: register({\n      required: 'This is required.'\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    id: \"uploadID\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Ukuran berkas harus kurang dari 10 MB.s\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"Jenis file yang diperbolehkan: .jpg , .jpeg, .png, .pdf\")), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"uploadID\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"g-recaptcha\",\n    id: \"gRecaptchaElement\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: \"hidGRecaptchaElement\",\n    defaultValue: state.rsvp.captchaValue,\n    ref: register({\n      required: 'Please validate captcha'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"hidGRecaptchaElement\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"clearfix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: \"userAcceptance\",\n    id: \"userAcceptance\",\n    ref: register({\n      required: 'Please accept the terms and condition'\n    }),\n    type: \"checkbox\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: \"userAcceptance\",\n    className: \"col-form-label pl-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \" Check to agree xl axiata terms and conditions.\")), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: \"userAcceptance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, __jsx(\"pre\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, JSON.stringify(formState, null, 2)), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Submit\")))) : '');\n}","map":{"version":3,"sources":["/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/personal/index.js"],"names":["React","useEffect","useRef","useForm","ErrorMessage","useOvermind","phonePattern1","reCaptchaInitialize","verifyCaptcha","RSVPPersonal","props","state","actions","mode","validateCriteriaMode","register","errors","handleSubmit","watch","formState","noKtur","watchNoKtur","watchNoSID","watchHidCaptcha","onSubmit","data","e","console","log","isSIDKTPVerified","window","grecaptcha","rsvp","required","pattern","value","message","messages","Object","entries","map","type","captchaValue","JSON","stringify"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,iBAAtC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,qBAAnD;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,qBAEbL,WAAW,EAFE;AAAA,MAEhCM,KAFgC,gBAEhCA,KAFgC;AAAA,MAEzBC,OAFyB,gBAEzBA,OAFyB;;AAAA,iBAGqBT,OAAO,CAAC;AACjEU,IAAAA,IAAI,EAAE,UAD2D;AAEjEC,IAAAA,oBAAoB,EAAE;AAF2C,GAAD,CAH5B;AAAA,MAGhCC,QAHgC,YAGhCA,QAHgC;AAAA,MAGtBC,MAHsB,YAGtBA,MAHsB;AAAA,MAGdC,YAHc,YAGdA,YAHc;AAAA,MAGAC,KAHA,YAGAA,KAHA;AAAA,MAGOC,SAHP,YAGOA,SAHP;;AAOxCC,EAAAA,MAAM;AACN,MAAMC,WAAW,GAAGH,KAAK,CAAC,QAAD,CAAzB;AACA,MAAMI,UAAU,GAAGJ,KAAK,CAAC,OAAD,CAAxB;AACA,MAAMK,eAAe,GAAGL,KAAK,CAAC,sBAAD,CAA7B;;AAEA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,IAAD,EAAOC,CAAP,EAAa;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BH,IAA/B,EAAqCC,CAArC;AACH,GAFD;;AAIA,MAAMG,gBAAgB,GAAG,KAAzB,CAhBwC,CAkBxC;;AACA5B,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAG,CAAC6B,MAAM,CAACC,UAAX,EAAuBxB,mBAAmB,CAAC,IAAD,CAAnB,CADX,CAGZ;AAEH,GALQ,EAKN,CAACgB,eAAD,CALM,CAAT;AAOAtB,EAAAA,SAAS,CAAC,YAAK;AACX,QAAG4B,gBAAH,EAAoB;AAChBlB,MAAAA,KAAK,CAACqB,IAAN,CAAWH,gBAAX,GAA8B,IAA9B,CADgB,CAEhB;;AACArB,MAAAA,aAAa,CAAC,sBAAD,CAAb;AACH;;AACDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BP,WAA3B;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,UAA1B;;AAEA,QAAID,WAAW,IAAIC,UAAnB,EAAgC;AAC5BK,MAAAA,OAAO,CAACC,GAAR,CAAY,6DAAZ;AACH;AACJ,GAZQ,CAAT;AAcA,SACI;AAAM,IAAA,SAAS,EAAC,MAAhB;AAAuB,IAAA,QAAQ,EAAEX,YAAY,CAACO,QAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,QAAf;AAAwB,IAAA,SAAS,EAAC,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA2D;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA3D,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,EAAE,EAAC,QAAV;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,GAAG,EAAET,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA9C;AAAmF,IAAA,IAAI,EAAC,MAAxF;AAA+F,IAAA,SAAS,EAAC,cAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CAFJ,EAUI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,SAAS,EAAC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAoE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApE,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,EAAE,EAAC,OAAX;AAAkB,IAAA,IAAI,EAAC,OAAvB;AAA+B,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA5C;AAAiF,IAAA,IAAI,EAAC,MAAtF;AACA,IAAA,SAAS,EAAC,cADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,CAVJ,EAoBQa,gBAAgB,GACZ,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACR;AAAO,IAAA,OAAO,EAAC,MAAf;AAAsB,IAAA,SAAS,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAsD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtD,CADQ,EAER;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,GAAG,EAAEd,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAhC;AAAqE,IAAA,IAAI,EAAC,MAA1E;AAAiF,IAAA,SAAS,EAAC,cAA3F;AAA0G,IAAA,EAAE,EAAC,MAA7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,MAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFQ,CADJ,EASR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,UAAf;AAA0B,IAAA,SAAS,EAAC,gBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxE,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAApC;AAAyE,IAAA,IAAI,EAAC,MAA9E;AAAqF,IAAA,SAAS,EAAC,cAA/F;AAA8G,IAAA,EAAE,EAAC,UAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CATQ,EAiBR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,SAAf;AAAyB,IAAA,SAAS,EAAC,gBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA4D;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA5D,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAnC;AAAwE,IAAA,IAAI,EAAC,MAA7E;AAAoF,IAAA,SAAS,EAAC,cAA9F;AAA6G,IAAA,EAAE,EAAC,SAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CAjBQ,EAyBR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,gBAAf;AAAgC,IAAA,SAAS,EAAC,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAsF;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAtF,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,gBAAZ;AAA6B,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA1C;AAA+E,IAAA,IAAI,EAAC,MAApF;AAA2F,IAAA,SAAS,EAAC,cAArG;AAAoH,IAAA,EAAE,EAAC,gBAAvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CAzBQ,EAiCR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,aAAf;AAA6B,IAAA,SAAS,EAAC,gBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAqE;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArE,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,aAAZ;AAA0B,IAAA,GAAG,EAAED,QAAQ,CAAC;AACpCkB,MAAAA,QAAQ,EAAE,mBAD0B;AAEpCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,KAAK,EAAE7B,aADF;AAEL8B,QAAAA,OAAO,EAAE;AAFJ;AAF2B,KAAD,CAAvC;AAOG,IAAA,IAAI,EAAC,MAPR;AAOe,IAAA,SAAS,EAAC,cAPzB;AAOwC,IAAA,EAAE,EAAC,aAP3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EASI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEpB,MAA7B;AAAqC,IAAA,IAAI,EAAC,aAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAA,QAAGqB,QAAH,QAAGA,QAAH;AAAA,WACGA,QAAQ,IACRC,MAAM,CAACC,OAAP,CAAeF,QAAf,EAAyBG,GAAzB,CAA6B;AAAA;AAAA,UAAEC,IAAF;AAAA,UAAQL,OAAR;;AAAA,aACzB;AAAG,QAAA,GAAG,EAAEK,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeL,OAAf,CADyB;AAAA,KAA7B,CAFH;AAAA,GADL,CATJ,CAFJ,CAjCQ,EAuDR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,SAAS,EAAC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAwD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAxD,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,GAAG,EAAErB,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAAjC;AAAsE,IAAA,IAAI,EAAC,MAA3E;AAAkF,IAAA,SAAS,EAAC,cAA5F;AAA2G,IAAA,EAAE,EAAC,OAA9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CAvDQ,EA+DR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoC;AAAG,IAAA,SAAS,EAAC,iCAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAApC,oBAEK;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAApC;AAAyE,IAAA,IAAI,EAAC,MAA9E;AAAqF,IAAA,SAAS,EAAC,YAA/F;AAA4G,IAAA,EAAE,EAAC,UAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFL,CADJ,CALJ,EAWI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAFJ,CAXJ,EAeI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,CA/DQ,EAiFR;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,EAAE,EAAC,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,IAAI,EAAC,sBAA1B;AAAiD,IAAA,YAAY,EAAEL,KAAK,CAACqB,IAAN,CAAWU,YAA1E;AACI,IAAA,GAAG,EAAE3B,QAAQ,CAAC;AAACkB,MAAAA,QAAQ,EAAE;AAAX,KAAD,CADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAII,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,sBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAjFQ,EAwFR;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,gBAAZ;AAA6B,IAAA,EAAE,EAAC,gBAAhC;AAAiD,IAAA,GAAG,EAAED,QAAQ,CAAC;AAAEkB,MAAAA,QAAQ,EAAE;AAAZ,KAAD,CAA9D;AAAuH,IAAA,IAAI,EAAC,UAA5H;AAAuI,IAAA,SAAS,EAAC,kBAAjJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI;AAAO,IAAA,OAAO,EAAC,gBAAf;AAAgC,IAAA,SAAS,EAAC,qBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDAFJ,CADJ,EAKI,MAAC,YAAD;AAAc,IAAA,EAAE,EAAC,GAAjB;AAAqB,IAAA,MAAM,EAAEjB,MAA7B;AAAqC,IAAA,IAAI,EAAC,gBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CAxFQ,EAgGR;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM2B,IAAI,CAACC,SAAL,CAAezB,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAN,CADA,EAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,SAAS,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,CADJ,CAhGQ,CADY,GAwGC,EA5HzB,CADJ;AAkIH","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1 } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\n\nexport default function RSVPPersonal(props) {\n\n    const { state, actions } = useOvermind();\n    const { register, errors, handleSubmit, watch, formState } = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\n    noKtur\n    const watchNoKtur = watch('noKtur');\n    const watchNoSID = watch('npSID');\n    const watchHidCaptcha = watch('hidGRecaptchaElement');\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    const isSIDKTPVerified = false;\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        if(!window.grecaptcha) reCaptchaInitialize('v2');\n        \n        // console.log('watchHidCaptcha', watchHidCaptcha);\n        \n    }, [watchHidCaptcha]);\n\n    useEffect(()=> {\n        if(isSIDKTPVerified){\n            state.rsvp.isSIDKTPVerified = true;\n            // verifyCaptcha\n            verifyCaptcha('hidGRecaptchaElement');\n        }\n        console.log('watchNoKtur', watchNoKtur);\n        console.log('watchNoSID', watchNoSID);\n\n        if((watchNoKtur && watchNoSID)) {\n            console.log('trigger api call to verify use is having valid sid and ktp ');\n        }\n    });\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2>Personal</h2>\n            <div className=\"form-group\">\n                <label htmlFor=\"noKtur\" className=\"col-form-label\">No KTUR <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input id=\"noKtur\" name=\"noKtur\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"noKtur\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"noSID\" className=\"col-form-label\">No SID/AKSes.KSEI <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input  id=\"noSID\"name=\"noSID\" ref={register({ required: 'This is required.' })} type=\"text\" \n                    className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"noSID\" />\n                </div>\n            </div>\n\n            {\n                isSIDKTPVerified ? (\n                    <React.Fragment> \n                        <div className=\"form-group\">\n                <label htmlFor=\"name\" className=\"col-form-label\">Nama <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"name\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" id=\"name\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"name\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"passport\" className=\"col-form-label\">NIK (KTP)/Passport <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"passport\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" id=\"passport\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"passport\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"address\" className=\"col-form-label\">Address <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"address\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" id=\"address\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"address\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"numberOfShares\" className=\"col-form-label\">Jumlah Saham (sesuai KTUR) <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"numberOfShares\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" id=\"numberOfShares\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"numberOfShares\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"phoneNumber\" className=\"col-form-label\">Phone/Mobile <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"phoneNumber\" ref={register({\n                        required: 'This is required.',\n                        pattern: {\n                            value: phonePattern1,\n                            message: \"Invalid phone number\"\n                        }\n                    }\n                    )} type=\"text\" className=\"form-control\" id=\"phoneNumber\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"phoneNumber\">\n                        {({ messages }) =>\n                            messages &&\n                            Object.entries(messages).map(([type, message]) => (\n                                <p key={type}>{message}</p>\n                            ))\n                        }\n                    </ErrorMessage>\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor=\"email\" className=\"col-form-label\">Email <span className=\"required\">*</span></label>\n                <div className=\"\">\n                    <input name=\"email\" ref={register({ required: 'This is required.' })} type=\"text\" className=\"form-control\" id=\"email\" />\n                    <ErrorMessage as=\"p\" errors={errors} name=\"email\" />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                {/* <label htmlFor=\"uploadID\" className=\"col-form-label\">Upload ID <span className=\"required\">*</span></label> */}\n                {/* <div className=\"\">\n                    <input name=\"uploadID\" ref={register({ required: 'This is required.' })} type=\"file\" className=\"form-control\" id=\"uploadID\" />\n                </div> */}\n                <div className=\"file-box\">\n                    <label className=\"input-file-label\"><a className=\"button button--2 button--axiata\">Upload ID</a>\n                         No file chosen\n                         <input name=\"uploadID\" ref={register({ required: 'This is required.' })} type=\"file\" className=\"input-file\" id=\"uploadID\" />\n                    </label>\n                </div>\n                <div className=\"file-info\">\n                    <p>Ukuran berkas harus kurang dari 10 MB.s</p>\n                    <p>Jenis file yang diperbolehkan: .jpg , .jpeg, .png, .pdf</p>\n                </div>\n                <ErrorMessage as=\"p\" errors={errors} name=\"uploadID\" />\n            </div>\n\n            <div className=\"form-group\">\n                <div className=\"g-recaptcha\" id=\"gRecaptchaElement\"></div>\n                <input type=\"hidden\" name=\"hidGRecaptchaElement\" defaultValue={state.rsvp.captchaValue} \n                    ref={register({required: 'Please validate captcha'})}/>\n                <ErrorMessage as=\"p\" errors={errors} name=\"hidGRecaptchaElement\" />\n            </div>\n\n            <div className=\"clearfix\">\n                <div className=\"form-check form-check-inline\">\n                    <input name=\"userAcceptance\" id=\"userAcceptance\" ref={register({ required: 'Please accept the terms and condition' })} type=\"checkbox\" className=\"form-check-label\" />\n                    <label htmlFor=\"userAcceptance\" className=\"col-form-label pl-1\"> Check to agree xl axiata terms and conditions.</label>\n                </div>\n                <ErrorMessage as=\"p\" errors={errors} name=\"userAcceptance\" />\n            </div>\n\n            <div className=\"form-group text-center\">\n                <div className=\"\">\n                <pre>{JSON.stringify(formState, null, 2)}</pre>\n\n                    <button type=\"submit\" className=\"button\">Submit</button>\n                </div>\n            </div>\n            </React.Fragment>) : ''\n            }\n           \n        </form>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage, FormContext } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nimport RSVPProxyHolderSubFields from './sub-fields';\nexport default function RSVPProxyHolder(props) {\n  const {\n    state,\n    actions\n  } = useOvermind(); // const { methods.register, errors, handleSubmit, watch, formState } = useForm({\n  //     mode: 'onChange',\n  //     validateCriteriaMode: \"all\"\n  // });\n\n  const methods = useForm({\n    mode: 'onChange',\n    validateCriteriaMode: \"all\"\n  });\n  console.log(methods);\n  const {\n    title,\n    data\n  } = state.rsvp.proxyHolder;\n  const {\n    name,\n    passport,\n    address,\n    numberOfShares,\n    phoneNumber,\n    email,\n    uploadID,\n    uploadArticleOfAssociation,\n    uploadProxy,\n    proxyOfShareHolderIdentity,\n    captcha,\n    userAcceptance,\n    submitButton,\n    infoText,\n    successMsgTitle,\n    successMsg,\n    failedMsgTitle,\n    failedMsg,\n    redirectURL\n  } = data || {};\n  const watchHidCaptcha = methods.watch(\"hidGRecaptchaElement\");\n\n  const onSubmit = (data, e) => {\n    console.log(\"Form submitted \", data, e);\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {// if(!window.grecaptcha) reCaptchaInitialize('v2');\n    // console.log('watchHidCaptcha', watchHidCaptcha);\n  }, [watchHidCaptcha]);\n  useEffect(() => {\n    // if (state.rsvp.isSIDKTPVerified) {\n    //     // verifyCaptcha\n    //     verifyCaptcha(captcha.hiddenField.name);\n    // }\n    // console.log('watchNoKtur', watchNoKtur);\n    // console.log('watchNoSID', watchNoSID);\n    // if ((watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS) && (watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS)) {\n    //     console.log('trigger api call to verify use is having valid sid and ktp ');\n    //     // actions.rsvp.verifyValidUser();\n    //     actions.rsvp.updateSIDKTPVerifedStatus();\n    //     // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n    // }\n    if (!window.grecaptcha) reCaptchaInitialize('v2');\n  });\n  return __jsx(FormContext, _extends({}, methods, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    className: \"form\",\n    onSubmit: methods.handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, title), __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: name.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, name.label, \" \", name.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: name.name,\n    name: name.name,\n    ref: methods.register({\n      required: name.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: name.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: passport.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, passport.label, \" \", passport.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: passport.name,\n    name: passport.name,\n    placeholder: passport.placeholder,\n    ref: methods.register({\n      required: passport.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: passport.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: address.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, address.label, \" \", address.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: address.name,\n    name: address.name,\n    placeholder: address.placeholder,\n    ref: methods.register({\n      required: address.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: address.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberOfShares.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, numberOfShares.label, \" \", numberOfShares.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberOfShares.name,\n    name: numberOfShares.name,\n    placeholder: numberOfShares.placeholder,\n    ref: methods.register({\n      required: numberOfShares.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: numberOfShares.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: phoneNumber.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, phoneNumber.label, \" \", phoneNumber.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: phoneNumber.name,\n    name: phoneNumber.name,\n    placeholder: phoneNumber.placeholder,\n    ref: methods.register({\n      required: phoneNumber.validation.required_msg,\n      pattern: {\n        value: phonePattern1,\n        message: phoneNumber.validation.pattern_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: phoneNumber.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: email.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, email.label, \" \", email.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: email.name,\n    name: email.name,\n    placeholder: email.placeholder,\n    ref: methods.register({\n      required: email.validation.required_msg,\n      pattern: {\n        value: emailPattern,\n        message: email.validation.pattern_msg\n      }\n    }),\n    type: \"email\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: email.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadID.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, uploadID.label), uploadID.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadID.name,\n    name: uploadID.name,\n    ref: methods.register({\n      required: uploadID.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }))), uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, uploadID.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, uploadID.fileInfoLine1) : '', uploadID.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, uploadID.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: uploadID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadArticleOfAssociation.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, uploadArticleOfAssociation.label), uploadArticleOfAssociation.placeholder, \" \", uploadArticleOfAssociation.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadArticleOfAssociation.name,\n    name: uploadArticleOfAssociation.name,\n    ref: methods.register({\n      required: uploadArticleOfAssociation.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }))), uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1) : '', uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: uploadArticleOfAssociation.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadProxy.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, uploadProxy.label), uploadProxy.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadProxy.name,\n    name: uploadProxy.name,\n    ref: methods.register({\n      required: uploadProxy.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }))), uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1) : '', uploadProxy.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: uploadProxy.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  })), __jsx(RSVPProxyHolderSubFields, {\n    data: proxyOfShareHolderIdentity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"clearfix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: userAcceptance.name,\n    id: userAcceptance.name,\n    ref: methods.register({\n      required: userAcceptance.validation.required_msg\n    }),\n    type: \"checkbox\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: userAcceptance.name,\n    className: \"col-form-label pl-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \" \", userAcceptance.label)), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: userAcceptance.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"g-recaptcha\",\n    id: captcha.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: captcha.hiddenField.name,\n    defaultValue: state.rsvp.captchaValue,\n    ref: methods.register({\n      required: captcha.validation.required_msg\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: methods.errors,\n    name: captcha.hiddenField.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    id: submitButton.name,\n    name: submitButton.name,\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }, submitButton.label))))));\n}","map":{"version":3,"sources":["/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js"],"names":["React","useEffect","useRef","useForm","ErrorMessage","FormContext","useOvermind","phonePattern1","emailPattern","KTP_SID_SEARCH_HIT_MIN_CHARS","reCaptchaInitialize","verifyCaptcha","RSVPProxyHolderSubFields","RSVPProxyHolder","props","state","actions","methods","mode","validateCriteriaMode","console","log","title","data","rsvp","proxyHolder","name","passport","address","numberOfShares","phoneNumber","email","uploadID","uploadArticleOfAssociation","uploadProxy","proxyOfShareHolderIdentity","captcha","userAcceptance","submitButton","infoText","successMsgTitle","successMsg","failedMsgTitle","failedMsg","redirectURL","watchHidCaptcha","watch","onSubmit","e","window","grecaptcha","handleSubmit","label","required","register","validation","required_msg","errors","placeholder","pattern","value","message","pattern_msg","fileInfoLine1","fileInfoLine2","id","hiddenField","captchaValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage, FormContext } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nimport RSVPProxyHolderSubFields from './sub-fields';\n\nexport default function RSVPProxyHolder(props) {\n\n    const { state, actions } = useOvermind();\n    // const { methods.register, errors, handleSubmit, watch, formState } = useForm({\n    //     mode: 'onChange',\n    //     validateCriteriaMode: \"all\"\n    // });\n\n    const methods = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\nconsole.log(methods);\n\n    const { title, data } = state.rsvp.proxyHolder;\n    const {\n        name,\n        passport,\n        address,\n        numberOfShares,\n        phoneNumber,\n        email,\n        uploadID,\n        uploadArticleOfAssociation,\n        uploadProxy,\n        proxyOfShareHolderIdentity,\n        captcha,\n        userAcceptance,\n        submitButton,\n        infoText,\n        successMsgTitle,\n        successMsg,\n        failedMsgTitle,\n        failedMsg,\n        redirectURL\n    } = data || {};\n\n\n    const watchHidCaptcha = methods.watch(\"hidGRecaptchaElement\");\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // if(!window.grecaptcha) reCaptchaInitialize('v2');\n\n        // console.log('watchHidCaptcha', watchHidCaptcha);\n\n    }, [watchHidCaptcha]);\n\n    useEffect(() => {\n        // if (state.rsvp.isSIDKTPVerified) {\n        //     // verifyCaptcha\n        //     verifyCaptcha(captcha.hiddenField.name);\n        // }\n        // console.log('watchNoKtur', watchNoKtur);\n        // console.log('watchNoSID', watchNoSID);\n\n        // if ((watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS) && (watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS)) {\n        //     console.log('trigger api call to verify use is having valid sid and ktp ');\n\n        //     // actions.rsvp.verifyValidUser();\n\n        //     actions.rsvp.updateSIDKTPVerifedStatus();\n\n        //     // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n        // }\n        if (!window.grecaptcha) reCaptchaInitialize('v2');\n\n    });\n\n    return (\n        <FormContext {...methods}>\n            <form className=\"form\" onSubmit={methods.handleSubmit(onSubmit)}>\n                <h2>{title}</h2>\n\n                {/* <pre> {data && JSON.stringify(data, null, 2)}</pre> */}\n\n                {/* {\n                state.rsvp.isSIDKTPVerified === true ? ( */}\n                <React.Fragment>\n                    <div className=\"form-group\">\n                        <label htmlFor={name.name} className=\"col-form-label\">{name.label} {name.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={name.name}\n                                name={name.name}\n                                ref={methods.register({\n                                    required: name.validation.required_msg,\n                                })}\n                                type=\"text\"\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={name.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={passport.name} className=\"col-form-label\">{passport.label} {passport.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={passport.name} name={passport.name}\n                                placeholder={passport.placeholder}\n                                ref={methods.register({\n                                    required: passport.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={passport.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={address.name} className=\"col-form-label\">{address.label} {address.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={address.name}\n                                name={address.name}\n                                placeholder={address.placeholder}\n                                ref={methods.register({\n                                    required: address.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={address.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={numberOfShares.name} className=\"col-form-label\">{numberOfShares.label} {numberOfShares.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={numberOfShares.name}\n                                name={numberOfShares.name}\n                                placeholder={numberOfShares.placeholder}\n                                ref={methods.register({\n                                    required: numberOfShares.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={numberOfShares.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={phoneNumber.name} className=\"col-form-label\">{phoneNumber.label} {phoneNumber.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={phoneNumber.name}\n                                name={phoneNumber.name}\n                                placeholder={phoneNumber.placeholder}\n                                ref={methods.register({\n                                    required: phoneNumber.validation.required_msg,\n                                    pattern: {\n                                        value: phonePattern1,\n                                        message: phoneNumber.validation.pattern_msg\n                                    }\n                                })}\n                                type=\"text\" className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={phoneNumber.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={email.name} className=\"col-form-label\">{email.label} {email.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={email.name}\n                                name={email.name}\n                                placeholder={email.placeholder}\n                                ref={methods.register({\n                                    required: email.validation.required_msg,\n                                    pattern: {\n                                        value: emailPattern,\n                                        message: email.validation.pattern_msg\n                                    }\n                                })}\n                                type=\"email\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={methods.errors} name={email.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadID.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadID.label}</a>\n                                {uploadID.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadID.name}\n                                    name={uploadID.name}\n                                    ref={methods.register({\n                                        required: uploadID.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadID.fileInfoLine1 ? (<p>{uploadID.fileInfoLine1}</p>) : ''}\n                            {uploadID.fileInfoLine2 ? (<p>{uploadID.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={methods.errors} name={uploadID.name} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadArticleOfAssociation.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadArticleOfAssociation.label}</a>\n                                {uploadArticleOfAssociation.placeholder} {uploadArticleOfAssociation.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadArticleOfAssociation.name}\n                                    name={uploadArticleOfAssociation.name}\n                                    ref={methods.register({\n                                        required: uploadArticleOfAssociation.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadArticleOfAssociation.fileInfoLine1 ? (<p>{uploadArticleOfAssociation.fileInfoLine1}</p>) : ''}\n                            {uploadArticleOfAssociation.fileInfoLine2 ? (<p>{uploadArticleOfAssociation.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={methods.errors} name={uploadArticleOfAssociation.name} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadProxy.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadProxy.label}</a>\n                                {uploadProxy.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadProxy.name}\n                                    name={uploadProxy.name}\n                                    ref={methods.register({\n                                        required: uploadProxy.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadProxy.fileInfoLine1 ? (<p>{uploadProxy.fileInfoLine1}</p>) : ''}\n                            {uploadProxy.fileInfoLine2 ? (<p>{uploadProxy.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={methods.errors} name={uploadProxy.name} />\n                    </div>\n\n                    {/* Sub fields defination from different component for proxyOfShareHolderIdentity - START */}\n                    <RSVPProxyHolderSubFields data={proxyOfShareHolderIdentity} />\n                    {/* Sub fields defination from different component - END */}\n                    <div className=\"clearfix\">\n                        <div className=\"form-check form-check-inline\">\n                            <input\n                                name={userAcceptance.name}\n                                id={userAcceptance.name}\n                                ref={methods.register({\n                                    required: userAcceptance.validation.required_msg\n                                })}\n                                type=\"checkbox\"\n                                className=\"form-check-label\" />\n                            <label\n                                htmlFor={userAcceptance.name}\n                                className=\"col-form-label pl-1\"> {userAcceptance.label}</label>\n                        </div>\n                        <ErrorMessage as=\"p\" errors={methods.errors} name={userAcceptance.name} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"g-recaptcha\" id={captcha.id}></div>\n                        <input type=\"hidden\" name={captcha.hiddenField.name} defaultValue={state.rsvp.captchaValue}\n                            ref={methods.register({\n                                required: captcha.validation.required_msg\n                            })} />\n                        <ErrorMessage as=\"p\" errors={methods.errors} name={captcha.hiddenField.name} />\n                    </div>\n\n                    <div className=\"form-group text-center\">\n                        <div className=\"\">\n                            <button\n                                type=\"submit\"\n                                id={submitButton.name}\n                                name={submitButton.name}\n                                className=\"button\">{submitButton.label}</button>\n                        </div>\n                    </div>\n                </React.Fragment>\n                {/* ) : (<div className=\"text-center text-info\">{infoText}</div>)} */}\n\n            </form>\n        </FormContext>);\n}\n"]},"metadata":{},"sourceType":"module"}
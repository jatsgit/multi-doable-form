{"ast":null,"code":"var _jsxFileName = \"/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nexport default function RSVPEntity(props) {\n  const {\n    state,\n    actions\n  } = useOvermind();\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch,\n    formState\n  } = useForm({\n    mode: 'onChange',\n    validateCriteriaMode: \"all\"\n  });\n  const {\n    title,\n    data\n  } = state.rsvp.entity;\n  const {\n    numberKTUR,\n    numberSID,\n    name,\n    passport,\n    address,\n    numberOfShares,\n    phoneNumber,\n    email,\n    uploadID,\n    uploadArticleOfAssociation,\n    uploadProxy,\n    captcha,\n    userAcceptance,\n    submitButton,\n    infoText,\n    successMsgTitle,\n    successMsg,\n    failedMsgTitle,\n    failedMsg,\n    redirectURL\n  } = data || {};\n  const watchNoKtur = watch(\"numberKTUR\");\n  const watchNoSID = watch(\"numberSID\");\n  const watchHidCaptcha = watch(\"hidGRecaptchaElement\");\n\n  const onSubmit = (data, e) => {\n    console.log(\"Form submitted \", data, e);\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {// if(!window.grecaptcha) reCaptchaInitialize('v2');\n    // console.log('watchHidCaptcha', watchHidCaptcha);\n  }, [watchHidCaptcha]);\n  useEffect(() => {\n    if (state.rsvp.isSIDKTPVerified) {\n      // verifyCaptcha\n      verifyCaptcha(captcha.hiddenField.name);\n    } // console.log('watchNoKtur', watchNoKtur);\n    // console.log('watchNoSID', watchNoSID);\n\n\n    if (watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS && watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS) {\n      console.log('trigger api call to verify use is having valid sid and ktp '); // actions.rsvp.verifyValidUser();\n\n      actions.rsvp.updateSIDKTPVerifedStatus(); // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n\n      if (!window.grecaptcha) reCaptchaInitialize('v2');\n    }\n  });\n  return __jsx(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, title), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberKTUR.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, numberKTUR.label, \" \", numberKTUR.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberKTUR.name,\n    name: numberKTUR.name,\n    placeholder: numberKTUR.placeholder,\n    ref: register({\n      required: numberKTUR.validation.required_msg,\n      minLength: {\n        value: 6,\n        message: numberKTUR.validation.minlength_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberKTUR.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberSID.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, numberSID.label, \" \", numberSID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberSID.name,\n    name: numberSID.name,\n    placeholder: numberSID.placeholder,\n    ref: register({\n      required: numberSID.validation.required_msg,\n      minLength: {\n        value: 6,\n        message: numberSID.validation.minlength_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberSID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }))), state.rsvp.isSIDKTPVerified === true ? __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: name.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, name.label, \" \", name.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: name.name,\n    name: name.name,\n    ref: register({\n      required: name.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: name.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: passport.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, passport.label, \" \", passport.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: passport.name,\n    name: passport.name,\n    placeholder: passport.placeholder,\n    ref: register({\n      required: passport.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: passport.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: address.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, address.label, \" \", address.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: address.name,\n    name: address.name,\n    placeholder: address.placeholder,\n    ref: register({\n      required: address.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: address.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberOfShares.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, numberOfShares.label, \" \", numberOfShares.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberOfShares.name,\n    name: numberOfShares.name,\n    placeholder: numberOfShares.placeholder,\n    ref: register({\n      required: numberOfShares.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberOfShares.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: phoneNumber.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, phoneNumber.label, \" \", phoneNumber.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: phoneNumber.name,\n    name: phoneNumber.name,\n    placeholder: phoneNumber.name,\n    ref: register({\n      required: phoneNumber.validation.required_msg,\n      pattern: {\n        value: phonePattern1,\n        message: phoneNumber.validation.pattern_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: phoneNumber.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: email.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, email.label, \" \", email.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: email.name,\n    name: email.name,\n    placeholder: email.placeholder,\n    ref: register({\n      required: email.validation.required_msg,\n      pattern: {\n        value: emailPattern,\n        message: email.validation.pattern_msg\n      }\n    }),\n    type: \"email\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: email.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadID.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, uploadID.label), uploadID.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadID.name,\n    name: uploadID.name,\n    ref: register({\n      required: uploadID.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }))), uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, uploadID.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, uploadID.fileInfoLine1) : '', uploadID.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, uploadID.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadArticleOfAssociation.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }, uploadArticleOfAssociation.label), uploadArticleOfAssociation.placeholder, \" \", uploadArticleOfAssociation.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadArticleOfAssociation.name,\n    name: uploadArticleOfAssociation.name,\n    ref: register({\n      required: uploadArticleOfAssociation.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241\n    },\n    __self: this\n  }))), uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1) : '', uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadArticleOfAssociation.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadProxy.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, uploadProxy.label), uploadProxy.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadProxy.name,\n    name: uploadProxy.name,\n    ref: register({\n      required: uploadProxy.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }))), uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1) : '', uploadProxy.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadProxy.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"g-recaptcha\",\n    id: captcha.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: captcha.hiddenField.name,\n    defaultValue: state.rsvp.captchaValue,\n    ref: register({\n      required: captcha.validation.required_msg\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: captcha.hiddenField.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"clearfix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: userAcceptance.name,\n    id: userAcceptance.name,\n    ref: register({\n      required: userAcceptance.validation.required_msg\n    }),\n    type: \"checkbox\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: userAcceptance.name,\n    className: \"col-form-label pl-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \" \", userAcceptance.label)), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: userAcceptance.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    id: submitButton.name,\n    name: submitButton.name,\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305\n    },\n    __self: this\n  }, submitButton.label)))) : __jsx(\"div\", {\n    className: \"text-center text-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, infoText));\n}","map":{"version":3,"sources":["/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js"],"names":["React","useEffect","useRef","useForm","ErrorMessage","useOvermind","phonePattern1","emailPattern","KTP_SID_SEARCH_HIT_MIN_CHARS","reCaptchaInitialize","verifyCaptcha","RSVPEntity","props","state","actions","register","errors","handleSubmit","watch","formState","mode","validateCriteriaMode","title","data","rsvp","entity","numberKTUR","numberSID","name","passport","address","numberOfShares","phoneNumber","email","uploadID","uploadArticleOfAssociation","uploadProxy","captcha","userAcceptance","submitButton","infoText","successMsgTitle","successMsg","failedMsgTitle","failedMsg","redirectURL","watchNoKtur","watchNoSID","watchHidCaptcha","onSubmit","e","console","log","isSIDKTPVerified","hiddenField","length","updateSIDKTPVerifedStatus","window","grecaptcha","label","required","placeholder","validation","required_msg","minLength","value","message","minlength_msg","pattern","pattern_msg","fileInfoLine1","fileInfoLine2","id","captchaValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\n\nexport default function RSVPEntity(props) {\n\n    const { state, actions } = useOvermind();\n    const { register, errors, handleSubmit, watch, formState } = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\n\n    const { title, data } = state.rsvp.entity;\n    const {\n        numberKTUR,\n        numberSID,\n        name,\n        passport,\n        address,\n        numberOfShares,\n        phoneNumber,\n        email,\n        uploadID,\n        uploadArticleOfAssociation,\n        uploadProxy,\n        captcha,\n        userAcceptance,\n        submitButton,\n        infoText,\n        successMsgTitle,\n        successMsg,\n        failedMsgTitle,\n        failedMsg,\n        redirectURL\n    } = data || {};\n\n\n    const watchNoKtur = watch(\"numberKTUR\");\n    const watchNoSID = watch(\"numberSID\");\n    const watchHidCaptcha = watch(\"hidGRecaptchaElement\");\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // if(!window.grecaptcha) reCaptchaInitialize('v2');\n\n        // console.log('watchHidCaptcha', watchHidCaptcha);\n\n    }, [watchHidCaptcha]);\n\n    useEffect(() => {\n        if (state.rsvp.isSIDKTPVerified) {\n            // verifyCaptcha\n            verifyCaptcha(captcha.hiddenField.name);\n        }\n        // console.log('watchNoKtur', watchNoKtur);\n        // console.log('watchNoSID', watchNoSID);\n\n        if ((watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS) && (watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS)) {\n            console.log('trigger api call to verify use is having valid sid and ktp ');\n\n            // actions.rsvp.verifyValidUser();\n\n            actions.rsvp.updateSIDKTPVerifedStatus();\n\n            // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n            if (!window.grecaptcha) reCaptchaInitialize('v2');\n        }\n    });\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2>{title}</h2>\n\n            {/* <pre> {data && JSON.stringify(data, null, 2)}</pre> */}\n\n            <div className=\"form-group\">\n                <label htmlFor={numberKTUR.name} className=\"col-form-label\">{numberKTUR.label} {numberKTUR.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberKTUR.name} name={numberKTUR.name}\n                        placeholder={numberKTUR.placeholder}\n                        ref={register({\n                            required: numberKTUR.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberKTUR.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\" className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberKTUR.name} />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor={numberSID.name} className=\"col-form-label\">{numberSID.label} {numberSID.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberSID.name} name={numberSID.name}\n                        placeholder={numberSID.placeholder}\n                        ref={register({\n                            required: numberSID.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberSID.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\"\n                        className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberSID.name} />\n                </div>\n            </div>\n            {/* {'state.rsvp.isSIDKTPVerified : ' + state.rsvp.isSIDKTPVerified} */}\n            {\n                state.rsvp.isSIDKTPVerified === true ? (\n                    <React.Fragment>\n                        <div className=\"form-group\">\n                            <label htmlFor={name.name} className=\"col-form-label\">{name.label} {name.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={name.name}\n                                    name={name.name}\n                                    ref={register({\n                                        required: name.validation.required_msg,\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                />\n                                <ErrorMessage as=\"p\" errors={errors} name={name.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={passport.name} className=\"col-form-label\">{passport.label} {passport.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={passport.name} name={passport.name}\n                                    placeholder={passport.placeholder}\n                                    ref={register({\n                                        required: passport.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={passport.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={address.name} className=\"col-form-label\">{address.label} {address.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={address.name}\n                                    name={address.name}\n                                    placeholder={address.placeholder}\n                                    ref={register({\n                                        required: address.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={address.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={numberOfShares.name} className=\"col-form-label\">{numberOfShares.label} {numberOfShares.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={numberOfShares.name}\n                                    name={numberOfShares.name}\n                                    placeholder={numberOfShares.placeholder}\n                                    ref={register({\n                                        required: numberOfShares.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={numberOfShares.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={phoneNumber.name} className=\"col-form-label\">{phoneNumber.label} {phoneNumber.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={phoneNumber.name}\n                                    name={phoneNumber.name}\n                                    placeholder={phoneNumber.name}\n                                    ref={register({\n                                        required: phoneNumber.validation.required_msg,\n                                        pattern: {\n                                            value: phonePattern1,\n                                            message: phoneNumber.validation.pattern_msg\n                                        }\n                                    })}\n                                    type=\"text\" className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={phoneNumber.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={email.name} className=\"col-form-label\">{email.label} {email.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={email.name}\n                                    name={email.name}\n                                    placeholder={email.placeholder}\n                                    ref={register({\n                                        required: email.validation.required_msg,\n                                        pattern: {\n                                            value: emailPattern,\n                                            message: email.validation.pattern_msg\n                                        }\n                                    })}\n                                    type=\"email\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={email.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <div className=\"file-box\">\n                                <label htmlFor={uploadID.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadID.label}</a>\n                                    {uploadID.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                    <input id={uploadID.name}\n                                        name={uploadID.name}\n                                        ref={register({\n                                            required: uploadID.validation.required_msg\n                                        })}\n                                        type=\"file\"\n                                        className=\"input-file\" />\n                                </label>\n                            </div>\n                            {uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? (<div className=\"file-info\">\n                                {uploadID.fileInfoLine1 ? (<p>{uploadID.fileInfoLine1}</p>) : ''}\n                                {uploadID.fileInfoLine2 ? (<p>{uploadID.fileInfoLine2}</p>) : ''}\n                            </div>) : ''}\n                            <ErrorMessage as=\"p\" errors={errors} name={uploadID.name} />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <div className=\"file-box\">\n                                <label htmlFor={uploadArticleOfAssociation.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadArticleOfAssociation.label}</a>\n                                    {uploadArticleOfAssociation.placeholder} {uploadArticleOfAssociation.required ? (<span className=\"required\">*</span>) : ''}\n                                    <input id={uploadArticleOfAssociation.name}\n                                        name={uploadArticleOfAssociation.name}\n                                        ref={register({\n                                            required: uploadArticleOfAssociation.validation.required_msg\n                                        })}\n                                        type=\"file\"\n                                        className=\"input-file\" />\n                                </label>\n                            </div>\n                            {uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? (<div className=\"file-info\">\n                                {uploadArticleOfAssociation.fileInfoLine1 ? (<p>{uploadArticleOfAssociation.fileInfoLine1}</p>) : ''}\n                                {uploadArticleOfAssociation.fileInfoLine2 ? (<p>{uploadArticleOfAssociation.fileInfoLine2}</p>) : ''}\n                            </div>) : ''}\n                            <ErrorMessage as=\"p\" errors={errors} name={uploadArticleOfAssociation.name} />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <div className=\"file-box\">\n                                <label htmlFor={uploadProxy.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadProxy.label}</a>\n                                    {uploadProxy.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                    <input id={uploadProxy.name}\n                                        name={uploadProxy.name}\n                                        ref={register({\n                                            required: uploadProxy.validation.required_msg\n                                        })}\n                                        type=\"file\"\n                                        className=\"input-file\" />\n                                </label>\n                            </div>\n                            {uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? (<div className=\"file-info\">\n                                {uploadProxy.fileInfoLine1 ? (<p>{uploadProxy.fileInfoLine1}</p>) : ''}\n                                {uploadProxy.fileInfoLine2 ? (<p>{uploadProxy.fileInfoLine2}</p>) : ''}\n                            </div>) : ''}\n                            <ErrorMessage as=\"p\" errors={errors} name={uploadProxy.name} />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <div className=\"g-recaptcha\" id={captcha.id}></div>\n                            <input type=\"hidden\" name={captcha.hiddenField.name} defaultValue={state.rsvp.captchaValue}\n                                ref={register({\n                                    required: captcha.validation.required_msg\n                                })} />\n                            <ErrorMessage as=\"p\" errors={errors} name={captcha.hiddenField.name} />\n                        </div>\n\n                        <div className=\"clearfix\">\n                            <div className=\"form-check form-check-inline\">\n                                <input\n                                    name={userAcceptance.name}\n                                    id={userAcceptance.name}\n                                    ref={register({\n                                        required: userAcceptance.validation.required_msg\n                                    })}\n                                    type=\"checkbox\"\n                                    className=\"form-check-label\" />\n                                <label\n                                    htmlFor={userAcceptance.name}\n                                    className=\"col-form-label pl-1\"> {userAcceptance.label}</label>\n                            </div>\n                            <ErrorMessage as=\"p\" errors={errors} name={userAcceptance.name} />\n                        </div>\n\n                        <div className=\"form-group text-center\">\n                            <div className=\"\">\n                                <button\n                                    type=\"submit\"\n                                    id={submitButton.name}\n                                    name={submitButton.name}\n                                    className=\"button\">{submitButton.label}</button>\n                            </div>\n                        </div>\n                    </React.Fragment>) : (<div className=\"text-center text-info\">{infoText}</div>)}\n\n        </form>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage, FormContext } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nimport RSVPProxyHolderSubFields from './sub-fields';\nexport default function RSVPProxyHolder(props) {\n  var _useOvermind = useOvermind(),\n      state = _useOvermind.state,\n      actions = _useOvermind.actions; // const { methods.register, errors, handleSubmit, watch, formState } = useForm({\n  //     mode: 'onChange',\n  //     validateCriteriaMode: \"all\"\n  // });\n\n\n  var methods = useForm({\n    mode: 'onChange',\n    validateCriteriaMode: \"all\"\n  });\n  console.log(methods);\n  var _state$rsvp$proxyHold = state.rsvp.proxyHolder,\n      title = _state$rsvp$proxyHold.title,\n      data = _state$rsvp$proxyHold.data;\n\n  var _ref = data || {},\n      name = _ref.name,\n      passport = _ref.passport,\n      address = _ref.address,\n      numberOfShares = _ref.numberOfShares,\n      phoneNumber = _ref.phoneNumber,\n      email = _ref.email,\n      uploadID = _ref.uploadID,\n      uploadArticleOfAssociation = _ref.uploadArticleOfAssociation,\n      uploadProxy = _ref.uploadProxy,\n      proxyOfShareHolderIdentity = _ref.proxyOfShareHolderIdentity,\n      captcha = _ref.captcha,\n      userAcceptance = _ref.userAcceptance,\n      submitButton = _ref.submitButton,\n      infoText = _ref.infoText,\n      successMsgTitle = _ref.successMsgTitle,\n      successMsg = _ref.successMsg,\n      failedMsgTitle = _ref.failedMsgTitle,\n      failedMsg = _ref.failedMsg,\n      redirectURL = _ref.redirectURL;\n\n  var watchHidCaptcha = methods.watch(\"hidGRecaptchaElement\");\n\n  var onSubmit = function onSubmit(data, e) {\n    console.log(\"Form submitted \", data, e);\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {// if(!window.grecaptcha) reCaptchaInitialize('v2');\n    // console.log('watchHidCaptcha', watchHidCaptcha);\n  }, [watchHidCaptcha]);\n  useEffect(function () {\n    if (state.rsvp.isSIDKTPVerified) {\n      // verifyCaptcha\n      verifyCaptcha(captcha.hiddenField.name);\n    } // console.log('watchNoKtur', watchNoKtur);\n    // console.log('watchNoSID', watchNoSID);\n    // if ((watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS) && (watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS)) {\n    //     console.log('trigger api call to verify use is having valid sid and ktp ');\n    //     // actions.rsvp.verifyValidUser();\n    //     actions.rsvp.updateSIDKTPVerifedStatus();\n    //     // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n    // }\n\n\n    if (!window.grecaptcha) reCaptchaInitialize('v2');\n  });\n  return __jsx(FormContext, _extends({}, methods, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), __jsx(\"form\", {\n    className: \"form\",\n    onSubmit: methods.handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, title), __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: name.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, name.label, \" \", name.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: name.name,\n    name: name.name,\n    ref: methods.register({\n      required: name.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: name.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: passport.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, passport.label, \" \", passport.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: passport.name,\n    name: passport.name,\n    placeholder: passport.placeholder,\n    ref: methods.register({\n      required: passport.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: passport.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: address.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, address.label, \" \", address.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: address.name,\n    name: address.name,\n    placeholder: address.placeholder,\n    ref: methods.register({\n      required: address.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: address.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberOfShares.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, numberOfShares.label, \" \", numberOfShares.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberOfShares.name,\n    name: numberOfShares.name,\n    placeholder: numberOfShares.placeholder,\n    ref: methods.register({\n      required: numberOfShares.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberOfShares.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: phoneNumber.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, phoneNumber.label, \" \", phoneNumber.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: phoneNumber.name,\n    name: phoneNumber.name,\n    placeholder: phoneNumber.placeholder,\n    ref: methods.register({\n      required: phoneNumber.validation.required_msg,\n      pattern: {\n        value: phonePattern1,\n        message: phoneNumber.validation.pattern_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: phoneNumber.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: email.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, email.label, \" \", email.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: email.name,\n    name: email.name,\n    placeholder: email.placeholder,\n    ref: methods.register({\n      required: email.validation.required_msg,\n      pattern: {\n        value: emailPattern,\n        message: email.validation.pattern_msg\n      }\n    }),\n    type: \"email\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: email.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadID.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, uploadID.label), uploadID.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadID.name,\n    name: uploadID.name,\n    ref: methods.register({\n      required: uploadID.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }))), uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, uploadID.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, uploadID.fileInfoLine1) : '', uploadID.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, uploadID.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadArticleOfAssociation.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, uploadArticleOfAssociation.label), uploadArticleOfAssociation.placeholder, \" \", uploadArticleOfAssociation.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadArticleOfAssociation.name,\n    name: uploadArticleOfAssociation.name,\n    ref: methods.register({\n      required: uploadArticleOfAssociation.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }))), uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine1) : '', uploadArticleOfAssociation.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, uploadArticleOfAssociation.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadArticleOfAssociation.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadProxy.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }, uploadProxy.label), uploadProxy.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadProxy.name,\n    name: uploadProxy.name,\n    ref: methods.register({\n      required: uploadProxy.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }))), uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine1) : '', uploadProxy.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, uploadProxy.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadProxy.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, proxyOfShareHolderIdentity.label, \" \", proxyOfShareHolderIdentity.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, \"*\") : '')), __jsx(RSVPProxyHolderSubFields, {\n    data: proxyOfShareHolderIdentity.subFields,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"g-recaptcha\",\n    id: captcha.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    type: \"hidden\",\n    name: captcha.hiddenField.name,\n    defaultValue: state.rsvp.captchaValue,\n    ref: methods.register({\n      required: captcha.validation.required_msg\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: captcha.hiddenField.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"clearfix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: userAcceptance.name,\n    id: userAcceptance.name,\n    ref: methods.register({\n      required: userAcceptance.validation.required_msg\n    }),\n    type: \"checkbox\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: userAcceptance.name,\n    className: \"col-form-label pl-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, \" \", userAcceptance.label)), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: userAcceptance.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    id: submitButton.name,\n    name: submitButton.name,\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317\n    },\n    __self: this\n  }, submitButton.label))))));\n}","map":{"version":3,"sources":["/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/proxy-holder/index.js"],"names":["React","useEffect","useRef","useForm","ErrorMessage","FormContext","useOvermind","phonePattern1","emailPattern","KTP_SID_SEARCH_HIT_MIN_CHARS","reCaptchaInitialize","verifyCaptcha","RSVPProxyHolderSubFields","RSVPProxyHolder","props","state","actions","methods","mode","validateCriteriaMode","console","log","rsvp","proxyHolder","title","data","name","passport","address","numberOfShares","phoneNumber","email","uploadID","uploadArticleOfAssociation","uploadProxy","proxyOfShareHolderIdentity","captcha","userAcceptance","submitButton","infoText","successMsgTitle","successMsg","failedMsgTitle","failedMsg","redirectURL","watchHidCaptcha","watch","onSubmit","e","isSIDKTPVerified","hiddenField","window","grecaptcha","handleSubmit","label","required","register","validation","required_msg","errors","placeholder","pattern","value","message","pattern_msg","fileInfoLine1","fileInfoLine2","subFields","id","captchaValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage, FormContext } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1, emailPattern, KTP_SID_SEARCH_HIT_MIN_CHARS } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nimport RSVPProxyHolderSubFields from './sub-fields';\n\nexport default function RSVPProxyHolder(props) {\n\n    const { state, actions } = useOvermind();\n    // const { methods.register, errors, handleSubmit, watch, formState } = useForm({\n    //     mode: 'onChange',\n    //     validateCriteriaMode: \"all\"\n    // });\n\n    const methods = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\nconsole.log(methods);\n\n    const { title, data } = state.rsvp.proxyHolder;\n    const {\n        name,\n        passport,\n        address,\n        numberOfShares,\n        phoneNumber,\n        email,\n        uploadID,\n        uploadArticleOfAssociation,\n        uploadProxy,\n        proxyOfShareHolderIdentity,\n        captcha,\n        userAcceptance,\n        submitButton,\n        infoText,\n        successMsgTitle,\n        successMsg,\n        failedMsgTitle,\n        failedMsg,\n        redirectURL\n    } = data || {};\n\n\n    const watchHidCaptcha = methods.watch(\"hidGRecaptchaElement\");\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // if(!window.grecaptcha) reCaptchaInitialize('v2');\n\n        // console.log('watchHidCaptcha', watchHidCaptcha);\n\n    }, [watchHidCaptcha]);\n\n    useEffect(() => {\n        if (state.rsvp.isSIDKTPVerified) {\n            // verifyCaptcha\n            verifyCaptcha(captcha.hiddenField.name);\n        }\n        // console.log('watchNoKtur', watchNoKtur);\n        // console.log('watchNoSID', watchNoSID);\n\n        // if ((watchNoKtur && watchNoKtur.length > KTP_SID_SEARCH_HIT_MIN_CHARS) && (watchNoSID && watchNoSID.length > KTP_SID_SEARCH_HIT_MIN_CHARS)) {\n        //     console.log('trigger api call to verify use is having valid sid and ktp ');\n\n        //     // actions.rsvp.verifyValidUser();\n\n        //     actions.rsvp.updateSIDKTPVerifedStatus();\n\n        //     // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n        // }\n        if (!window.grecaptcha) reCaptchaInitialize('v2');\n\n    });\n\n    return (\n        <FormContext {...methods}>\n            <form className=\"form\" onSubmit={methods.handleSubmit(onSubmit)}>\n                <h2>{title}</h2>\n\n                {/* <pre> {data && JSON.stringify(data, null, 2)}</pre> */}\n\n                {/* <div className=\"form-group\">\n                <label htmlFor={numberKTUR.name} className=\"col-form-label\">{numberKTUR.label} {numberKTUR.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberKTUR.name} name={numberKTUR.name}\n                        placeholder={numberKTUR.placeholder}\n                        ref={methods.register({\n                            required: numberKTUR.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberKTUR.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\" className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberKTUR.name} />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor={numberSID.name} className=\"col-form-label\">{numberSID.label} {numberSID.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberSID.name} name={numberSID.name}\n                        placeholder={numberSID.placeholder}\n                        ref={methods.register({\n                            required: numberSID.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberSID.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\"\n                        className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberSID.name} />\n                </div>\n            </div> */}\n                {/* {\n                state.rsvp.isSIDKTPVerified === true ? ( */}\n                <React.Fragment>\n                    <div className=\"form-group\">\n                        <label htmlFor={name.name} className=\"col-form-label\">{name.label} {name.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={name.name}\n                                name={name.name}\n                                ref={methods.register({\n                                    required: name.validation.required_msg,\n                                })}\n                                type=\"text\"\n                                className=\"form-control\"\n                            />\n                            <ErrorMessage as=\"p\" errors={errors} name={name.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={passport.name} className=\"col-form-label\">{passport.label} {passport.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={passport.name} name={passport.name}\n                                placeholder={passport.placeholder}\n                                ref={methods.register({\n                                    required: passport.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={errors} name={passport.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={address.name} className=\"col-form-label\">{address.label} {address.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={address.name}\n                                name={address.name}\n                                placeholder={address.placeholder}\n                                ref={methods.register({\n                                    required: address.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={errors} name={address.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={numberOfShares.name} className=\"col-form-label\">{numberOfShares.label} {numberOfShares.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={numberOfShares.name}\n                                name={numberOfShares.name}\n                                placeholder={numberOfShares.placeholder}\n                                ref={methods.register({\n                                    required: numberOfShares.validation.required_msg\n                                })}\n                                type=\"text\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={errors} name={numberOfShares.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={phoneNumber.name} className=\"col-form-label\">{phoneNumber.label} {phoneNumber.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={phoneNumber.name}\n                                name={phoneNumber.name}\n                                placeholder={phoneNumber.placeholder}\n                                ref={methods.register({\n                                    required: phoneNumber.validation.required_msg,\n                                    pattern: {\n                                        value: phonePattern1,\n                                        message: phoneNumber.validation.pattern_msg\n                                    }\n                                })}\n                                type=\"text\" className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={errors} name={phoneNumber.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor={email.name} className=\"col-form-label\">{email.label} {email.required ? (<span className=\"required\">*</span>) : ''}</label>\n                        <div className=\"\">\n                            <input id={email.name}\n                                name={email.name}\n                                placeholder={email.placeholder}\n                                ref={methods.register({\n                                    required: email.validation.required_msg,\n                                    pattern: {\n                                        value: emailPattern,\n                                        message: email.validation.pattern_msg\n                                    }\n                                })}\n                                type=\"email\"\n                                className=\"form-control\" />\n                            <ErrorMessage as=\"p\" errors={errors} name={email.name} />\n                        </div>\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadID.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadID.label}</a>\n                                {uploadID.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadID.name}\n                                    name={uploadID.name}\n                                    ref={methods.register({\n                                        required: uploadID.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadID.fileInfoLine1 ? (<p>{uploadID.fileInfoLine1}</p>) : ''}\n                            {uploadID.fileInfoLine2 ? (<p>{uploadID.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={errors} name={uploadID.name} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadArticleOfAssociation.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadArticleOfAssociation.label}</a>\n                                {uploadArticleOfAssociation.placeholder} {uploadArticleOfAssociation.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadArticleOfAssociation.name}\n                                    name={uploadArticleOfAssociation.name}\n                                    ref={methods.register({\n                                        required: uploadArticleOfAssociation.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadArticleOfAssociation.fileInfoLine1 || uploadArticleOfAssociation.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadArticleOfAssociation.fileInfoLine1 ? (<p>{uploadArticleOfAssociation.fileInfoLine1}</p>) : ''}\n                            {uploadArticleOfAssociation.fileInfoLine2 ? (<p>{uploadArticleOfAssociation.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={errors} name={uploadArticleOfAssociation.name} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <div className=\"file-box\">\n                            <label htmlFor={uploadProxy.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadProxy.label}</a>\n                                {uploadProxy.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                <input id={uploadProxy.name}\n                                    name={uploadProxy.name}\n                                    ref={methods.register({\n                                        required: uploadProxy.validation.required_msg\n                                    })}\n                                    type=\"file\"\n                                    className=\"input-file\" />\n                            </label>\n                        </div>\n                        {uploadProxy.fileInfoLine1 || uploadProxy.fileInfoLine2 ? (<div className=\"file-info\">\n                            {uploadProxy.fileInfoLine1 ? (<p>{uploadProxy.fileInfoLine1}</p>) : ''}\n                            {uploadProxy.fileInfoLine2 ? (<p>{uploadProxy.fileInfoLine2}</p>) : ''}\n                        </div>) : ''}\n                        <ErrorMessage as=\"p\" errors={errors} name={uploadProxy.name} />\n                    </div>\n\n                    {/* Sub fields defination from different component for proxyOfShareHolderIdentity - START */}\n                    <div className=\"form-group\">\n                        <label>{proxyOfShareHolderIdentity.label} {proxyOfShareHolderIdentity.required ? (<span className=\"required\">*</span>) : ''}</label>\n                    </div>\n                    <RSVPProxyHolderSubFields data={proxyOfShareHolderIdentity.subFields} />\n                    {/* Sub fields defination from different component - END */}\n\n                    <div className=\"form-group\">\n                        <div className=\"g-recaptcha\" id={captcha.id}></div>\n                        <input type=\"hidden\" name={captcha.hiddenField.name} defaultValue={state.rsvp.captchaValue}\n                            ref={methods.register({\n                                required: captcha.validation.required_msg\n                            })} />\n                        <ErrorMessage as=\"p\" errors={errors} name={captcha.hiddenField.name} />\n                    </div>\n\n                    <div className=\"clearfix\">\n                        <div className=\"form-check form-check-inline\">\n                            <input\n                                name={userAcceptance.name}\n                                id={userAcceptance.name}\n                                ref={methods.register({\n                                    required: userAcceptance.validation.required_msg\n                                })}\n                                type=\"checkbox\"\n                                className=\"form-check-label\" />\n                            <label\n                                htmlFor={userAcceptance.name}\n                                className=\"col-form-label pl-1\"> {userAcceptance.label}</label>\n                        </div>\n                        <ErrorMessage as=\"p\" errors={errors} name={userAcceptance.name} />\n                    </div>\n\n                    <div className=\"form-group text-center\">\n                        <div className=\"\">\n                            <button\n                                type=\"submit\"\n                                id={submitButton.name}\n                                name={submitButton.name}\n                                className=\"button\">{submitButton.label}</button>\n                        </div>\n                    </div>\n                </React.Fragment>\n                {/* ) : (<div className=\"text-center text-info\">{infoText}</div>)} */}\n\n            </form>\n        </FormContext>);\n}\n"]},"metadata":{},"sourceType":"module"}
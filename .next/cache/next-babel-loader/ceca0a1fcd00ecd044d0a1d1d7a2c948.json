{"ast":null,"code":"var _jsxFileName = \"/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/personal/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\nimport { phonePattern1, emailPattern } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\nexport default function RSVPPersonal(props) {\n  var _useOvermind = useOvermind(),\n      state = _useOvermind.state,\n      actions = _useOvermind.actions;\n\n  var _useForm = useForm({\n    mode: 'onChange',\n    validateCriteriaMode: \"all\"\n  }),\n      register = _useForm.register,\n      errors = _useForm.errors,\n      handleSubmit = _useForm.handleSubmit,\n      watch = _useForm.watch,\n      formState = _useForm.formState;\n\n  var _ref = state.rsvp.personal && state.rsvp.personal.data || {},\n      numberKTUR = _ref.numberKTUR,\n      numberSID = _ref.numberSID,\n      name = _ref.name,\n      passport = _ref.passport,\n      address = _ref.address,\n      numberOfShares = _ref.numberOfShares,\n      phoneNumber = _ref.phoneNumber,\n      email = _ref.email,\n      uploadID = _ref.uploadID,\n      captcha = _ref.captcha,\n      userAcceptance = _ref.userAcceptance,\n      submitButton = _ref.submitButton,\n      infoText = _ref.infoText,\n      successMsgTitle = _ref.successMsgTitle,\n      successMsg = _ref.successMsg,\n      failedMsgTitle = _ref.failedMsgTitle,\n      failedMsg = _ref.failedMsg,\n      redirectURL = _ref.redirectURL;\n\n  var watchNoKtur = watch({\n    numberKTUR: numberKTUR\n  });\n  var watchNoSID = watch({\n    numberSID: numberSID\n  });\n  var watchHidCaptcha = watch(captcha.hiddenField.name);\n\n  var onSubmit = function onSubmit(data, e) {\n    console.log(\"Form submitted \", data, e);\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(function () {// if(!window.grecaptcha) reCaptchaInitialize('v2');\n    // console.log('watchHidCaptcha', watchHidCaptcha);\n  }, [watchHidCaptcha]);\n  useEffect(function () {\n    if (state.rsvp.isSIDKTPVerified) {\n      // verifyCaptcha\n      verifyCaptcha(captcha.hiddenField.name);\n    }\n\n    console.log('watchNoKtur', watchNoKtur);\n    console.log('watchNoSID', watchNoSID);\n\n    if (watchNoKtur && watchNoKtur.length > 6 && watchNoSID && watchNoSID.length > 6) {\n      console.log('trigger api call to verify use is having valid sid and ktp '); // actions.rsvp.verifyValidUser();\n\n      actions.rsvp.updateSIDKTPVerifedStatus(); // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n\n      if (!window.grecaptcha) reCaptchaInitialize('v2');\n    }\n  });\n  return __jsx(\"form\", {\n    className: \"form\",\n    onSubmit: handleSubmit(onSubmit),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Personal\"), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberKTUR.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, numberKTUR.label, \" \", numberKTUR.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberKTUR.name,\n    name: numberKTUR.name,\n    placeholder: numberKTUR.placeholder,\n    ref: register({\n      required: numberKTUR.validation.required_msg,\n      minLength: {\n        value: 6,\n        message: numberKTUR.validation.minlength_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberKTUR.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberSID.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, numberSID.label, \" \", numberSID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberSID.name,\n    name: numberSID.name,\n    placeholder: numberSID.placeholder,\n    ref: register({\n      required: numberSID.validation.required_msg,\n      minLength: {\n        value: 6,\n        message: numberSID.validation.minlength_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberSID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }))), state.rsvp.isSIDKTPVerified === true ? __jsx(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: name.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, name.label, \" \", name.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: name.name,\n    name: name.name,\n    ref: register({\n      required: name.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: name.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: passport.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, passport.label, \" \", passport.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: passport.name,\n    name: passport.name,\n    placeholder: passport.placeholder,\n    ref: register({\n      required: passport.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: passport.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: address.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, address.label, \" \", address.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: address.name,\n    name: address.name,\n    placeholder: address.placeholder,\n    ref: register({\n      required: address.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: address.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: numberOfShares.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, numberOfShares.label, \" \", numberOfShares.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: numberOfShares.name,\n    name: numberOfShares.name,\n    placeholder: numberOfShares.placeholder,\n    ref: register({\n      required: numberOfShares.validation.required_msg\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: numberOfShares.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: phoneNumber.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, phoneNumber.label, \" \", phoneNumber.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: phoneNumber.name,\n    name: phoneNumber.name,\n    placeholder: phoneNumber.name,\n    ref: register({\n      required: phoneNumber.validation.required_msg,\n      pattern: {\n        value: phonePattern1,\n        message: phoneNumber.validation.pattern_msg\n      }\n    }),\n    type: \"text\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: phoneNumber.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: email.name,\n    className: \"col-form-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, email.label, \" \", email.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"*\") : ''), __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: email.name,\n    name: email.name,\n    placeholder: email.placeholder,\n    ref: register({\n      required: email.validation.required_msg,\n      pattern: {\n        value: emailPattern,\n        message: email.validation.pattern_msg\n      }\n    }),\n    type: \"email\",\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: email.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }))), __jsx(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"file-box\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: uploadID.name,\n    className: \"input-file-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, __jsx(\"a\", {\n    className: \"button button--2 button--axiata\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221\n    },\n    __self: this\n  }, uploadID.label), uploadID.placeholder, \" \", uploadID.required ? __jsx(\"span\", {\n    className: \"required\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  }, \"*\") : '', __jsx(\"input\", {\n    id: uploadID.name,\n    name: uploadID.name,\n    ref: register({\n      required: uploadID.validation.required_msg\n    }),\n    type: \"file\",\n    className: \"input-file\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }))), uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? __jsx(\"div\", {\n    className: \"file-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, uploadID.fileInfoLine1 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }, uploadID.fileInfoLine1) : '', uploadID.fileInfoLine2 ? __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, uploadID.fileInfoLine2) : '') : '', __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: uploadID.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"clearfix\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    name: userAcceptance.name,\n    id: userAcceptance.name,\n    ref: register({\n      required: userAcceptance.validation.required_msg\n    }),\n    type: \"checkbox\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    htmlFor: userAcceptance.name,\n    className: \"col-form-label pl-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  }, \" \", userAcceptance.label)), __jsx(ErrorMessage, {\n    as: \"p\",\n    errors: errors,\n    name: userAcceptance.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    className: \"form-group text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: \"submit\",\n    id: submitButton.name,\n    name: submitButton.name,\n    className: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, submitButton.label)))) : __jsx(\"div\", {\n    className: \"text-center text-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275\n    },\n    __self: this\n  }, infoText));\n}","map":{"version":3,"sources":["/Users/jatinderbimra/work/xlbb/rsvp-next/components/RSVPForm/personal/index.js"],"names":["React","useEffect","useRef","useForm","ErrorMessage","useOvermind","phonePattern1","emailPattern","reCaptchaInitialize","verifyCaptcha","RSVPPersonal","props","state","actions","mode","validateCriteriaMode","register","errors","handleSubmit","watch","formState","rsvp","personal","data","numberKTUR","numberSID","name","passport","address","numberOfShares","phoneNumber","email","uploadID","captcha","userAcceptance","submitButton","infoText","successMsgTitle","successMsg","failedMsgTitle","failedMsg","redirectURL","watchNoKtur","watchNoSID","watchHidCaptcha","hiddenField","onSubmit","e","console","log","isSIDKTPVerified","length","updateSIDKTPVerifedStatus","window","grecaptcha","label","required","placeholder","validation","required_msg","minLength","value","message","minlength_msg","pattern","pattern_msg","fileInfoLine1","fileInfoLine2"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1, emailPattern } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\n\nexport default function RSVPPersonal(props) {\n\n    const { state, actions } = useOvermind();\n    const { register, errors, handleSubmit, watch, formState } = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\n\n    const {\n        numberKTUR, \n        numberSID, \n        name,\n        passport, \n        address, \n        numberOfShares, \n        phoneNumber,\n        email,\n        uploadID,\n        captcha,\n        userAcceptance,\n        submitButton,\n        infoText,\n        successMsgTitle,\n        successMsg,\n        failedMsgTitle,\n        failedMsg,\n        redirectURL\n    } = state.rsvp.personal && state.rsvp.personal.data || {};\n\n\n    const watchNoKtur = watch({numberKTUR});\n    const watchNoSID = watch({numberSID});\n    const watchHidCaptcha = watch(captcha.hiddenField.name);\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // if(!window.grecaptcha) reCaptchaInitialize('v2');\n\n        // console.log('watchHidCaptcha', watchHidCaptcha);\n\n    }, [watchHidCaptcha]);\n\n    useEffect(() => {\n        if (state.rsvp.isSIDKTPVerified) {\n            // verifyCaptcha\n            verifyCaptcha(captcha.hiddenField.name);\n        }\n        console.log('watchNoKtur', watchNoKtur);\n        console.log('watchNoSID', watchNoSID);\n\n        if ((watchNoKtur && watchNoKtur.length > 6) && (watchNoSID && watchNoSID.length > 6)) {\n            console.log('trigger api call to verify use is having valid sid and ktp ');\n\n            // actions.rsvp.verifyValidUser();\n\n            actions.rsvp.updateSIDKTPVerifedStatus();\n\n            // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n            if (!window.grecaptcha) reCaptchaInitialize('v2');\n        }\n    });\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2>Personal</h2>\n            \n            {/* <pre> {state.rsvp.personal.data && JSON.stringify(state.rsvp.personal.data, null, 2)}</pre> */}\n\n            \n            <div className=\"form-group\">\n                <label htmlFor={numberKTUR.name} className=\"col-form-label\">{numberKTUR.label} {numberKTUR.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberKTUR.name} name={numberKTUR.name}\n                        placeholder={numberKTUR.placeholder}\n                        ref={register({\n                            required: numberKTUR.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberKTUR.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\" className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberKTUR.name} />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor={numberSID.name} className=\"col-form-label\">{numberSID.label} {numberSID.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberSID.name} name={numberSID.name}\n                        placeholder={numberSID.placeholder}\n                        ref={register({\n                            required: numberSID.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberSID.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\"\n                        className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberSID.name} />\n                </div>\n            </div>\n            {/* {'state.rsvp.isSIDKTPVerified : ' + state.rsvp.isSIDKTPVerified} */}\n            {\n                state.rsvp.isSIDKTPVerified === true ? (\n                    <React.Fragment>\n                        <div className=\"form-group\">\n                            <label htmlFor={name.name} className=\"col-form-label\">{name.label} {name.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={name.name}\n                                    name={name.name}\n                                    ref={register({\n                                        required: name.validation.required_msg,\n                                    })}\n                                    type=\"text\" \n                                    className=\"form-control\"\n                                />\n                                <ErrorMessage as=\"p\" errors={errors} name={name.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={passport.name} className=\"col-form-label\">{passport.label} {passport.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={passport.name} name={passport.name}\n                                    placeholder={passport.placeholder}\n                                    ref={register({\n                                        required: passport.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={passport.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={address.name} className=\"col-form-label\">{address.label} {address.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={address.name}\n                                    name={address.name}\n                                    placeholder={address.placeholder}\n                                    ref={register({\n                                        required: address.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={address.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={numberOfShares.name} className=\"col-form-label\">{numberOfShares.label} {numberOfShares.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={numberOfShares.name}\n                                    name={numberOfShares.name}\n                                    placeholder={numberOfShares.placeholder}\n                                    ref={register({\n                                        required: numberOfShares.validation.required_msg\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={numberOfShares.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={phoneNumber.name} className=\"col-form-label\">{phoneNumber.label} {phoneNumber.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={phoneNumber.name}\n                                    name={phoneNumber.name}\n                                    placeholder={phoneNumber.name}\n                                    ref={register({\n                                        required: phoneNumber.validation.required_msg,\n                                        pattern: {\n                                            value: phonePattern1,\n                                            message: phoneNumber.validation.pattern_msg\n                                        }\n                                    })}\n                                    type=\"text\" className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={phoneNumber.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor={email.name} className=\"col-form-label\">{email.label} {email.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={email.name}\n                                    name={email.name}\n                                    placeholder={email.placeholder}\n                                    ref={register({\n                                        required: email.validation.required_msg,\n                                        pattern: {\n                                            value: emailPattern,\n                                            message: email.validation.pattern_msg\n                                        }\n                                    })}\n                                    type=\"email\" \n                                    className=\"form-control\" />\n                                <ErrorMessage as=\"p\" errors={errors} name={email.name} />\n                            </div>\n                        </div>\n\n                        <div className=\"form-group\">\n                            {/* <label htmlFor=\"uploadID\" className=\"col-form-label\">Upload ID {element.required ? (<span className=\"required\">*</span>) : ''}</label> */}\n                            {/* <div className=\"\">\n                            <input name=\"uploadID\" ref={register({ required: 'This is required' })} type=\"file\" className=\"form-control\" id=\"uploadID\" />\n                        </div> */}\n                            <div className=\"file-box\">\n                                <label htmlFor={uploadID.name} className=\"input-file-label\"><a className=\"button button--2 button--axiata\">{uploadID.label}</a>\n                                    {uploadID.placeholder} {uploadID.required ? (<span className=\"required\">*</span>) : ''}\n                                    <input id={uploadID.name}\n                                        name={uploadID.name}\n                                        ref={register({\n                                            required: uploadID.validation.required_msg\n                                        })}\n                                        type=\"file\"\n                                        className=\"input-file\" />\n                                </label>\n                            </div>\n                            {uploadID.fileInfoLine1 || uploadID.fileInfoLine2 ? (<div className=\"file-info\">\n                                {uploadID.fileInfoLine1 ? (<p>{uploadID.fileInfoLine1}</p>) : ''}\n                                {uploadID.fileInfoLine2 ? (<p>{uploadID.fileInfoLine2}</p>) : ''}\n                            </div>) : ''}\n                            <ErrorMessage as=\"p\" errors={errors} name={uploadID.name} />\n                        </div>\n\n                        {/* <div className=\"form-group\">\n                            <div className=\"g-recaptcha\" id={captcha.id}></div>\n                            <input type=\"hidden\" name={captcha.hiddenField.name} defaultValue={state.rsvp.captchaValue}\n                                ref={register({\n                                    required:\n                                        captcha.validation.required_msg\n                                })} />\n                            <ErrorMessage as=\"p\" errors={errors} name={captcha.hiddenField.name} />\n                        </div> */}\n\n                        <div className=\"clearfix\">\n                            <div className=\"form-check form-check-inline\">\n                                <input\n                                    name={userAcceptance.name}\n                                    id={userAcceptance.name}\n                                    ref={register({\n                                        required: userAcceptance.validation.required_msg\n                                    })}\n                                    type=\"checkbox\"\n                                    className=\"form-check-label\" />\n                                <label \n                                    htmlFor={userAcceptance.name} \n                                    className=\"col-form-label pl-1\"> {userAcceptance.label}</label>\n                            </div>\n                            <ErrorMessage as=\"p\" errors={errors} name={userAcceptance.name} />\n                        </div>\n\n                        <div className=\"form-group text-center\">\n                            <div className=\"\">\n                                <button \n                                    type=\"submit\" \n                                    id={submitButton.name} \n                                    name={submitButton.name} \n                                    className=\"button\">{submitButton.label}</button>\n                            </div>\n                        </div>\n                                </React.Fragment>) : (<div className=\"text-center text-info\">{infoText}</div>)}\n\n        </form>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}
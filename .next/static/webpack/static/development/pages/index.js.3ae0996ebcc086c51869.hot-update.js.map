{"version":3,"file":"static/webpack/static/development/pages/index.js.3ae0996ebcc086c51869.hot-update.js","sources":["webpack:///./components/RSVPForm/entity/index.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useForm, ErrorMessage } from 'react-hook-form';\nimport { useOvermind } from '../../../overmind';\n\nimport { phonePattern1, emailPattern } from '../../../util/constants';\nimport { reCaptchaInitialize, verifyCaptcha } from '../../../util/index';\n\nexport default function RSVPEntity(props) {\n\n    const { state, actions } = useOvermind();\n    const { register, errors, handleSubmit, watch, formState } = useForm({\n        mode: 'onChange',\n        validateCriteriaMode: \"all\"\n    });\n\n    const { title, data } = state.rsvp.entity;\n    const {\n        numberKTUR,\n        numberSID,\n        name,\n        passport,\n        address,\n        numberOfShares,\n        phoneNumber,\n        email,\n        uploadID,\n        uploadArticleOfAssociation,\n        uploadProxy,\n        captcha,\n        userAcceptance,\n        submitButton,\n        infoText,\n        successMsgTitle,\n        successMsg,\n        failedMsgTitle,\n        failedMsg,\n        redirectURL\n    } = data || {};\n\n\n    const watchNoKtur = watch(\"numberKTUR\");\n    const watchNoSID = watch(\"numberSID\");\n    const watchHidCaptcha = watch(\"hidGRecaptchaElement\");\n\n    const onSubmit = (data, e) => {\n        console.log(\"Form submitted \", data, e)\n    };\n\n    // Similar to componentDidMount and componentDidUpdate:\n    useEffect(() => {\n        // if(!window.grecaptcha) reCaptchaInitialize('v2');\n\n        // console.log('watchHidCaptcha', watchHidCaptcha);\n\n    }, [watchHidCaptcha]);\n\n    useEffect(() => {\n        if (state.rsvp.isSIDKTPVerified) {\n            // verifyCaptcha\n            verifyCaptcha(captcha.hiddenField.name);\n        }\n        console.log('watchNoKtur', watchNoKtur);\n        console.log('watchNoSID', watchNoSID);\n\n        if ((watchNoKtur && watchNoKtur.length > 6) && (watchNoSID && watchNoSID.length > 6)) {\n            console.log('trigger api call to verify use is having valid sid and ktp ');\n\n            // actions.rsvp.verifyValidUser();\n\n            actions.rsvp.updateSIDKTPVerifedStatus();\n\n            // if(window.grecaptcha) grecaptcha.reset('gRecaptchaElement');\n            if (!window.grecaptcha) reCaptchaInitialize('v2');\n        }\n    });\n\n    return (\n        <form className=\"form\" onSubmit={handleSubmit(onSubmit)}>\n            <h2>{title}</h2>\n\n            {/* <pre> {data && JSON.stringify(data, null, 2)}</pre> */}\n\n            <div className=\"form-group\">\n                <label htmlFor={numberKTUR.name} className=\"col-form-label\">{numberKTUR.label} {numberKTUR.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberKTUR.name} name={numberKTUR.name}\n                        placeholder={numberKTUR.placeholder}\n                        ref={register({\n                            required: numberKTUR.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberKTUR.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\" className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberKTUR.name} />\n                </div>\n            </div>\n\n            <div className=\"form-group\">\n                <label htmlFor={numberSID.name} className=\"col-form-label\">{numberSID.label} {numberSID.required ? (<span className=\"required\">*</span>) : ''}</label>\n                <div className=\"\">\n                    <input id={numberSID.name} name={numberSID.name}\n                        placeholder={numberSID.placeholder}\n                        ref={register({\n                            required: numberSID.validation.required_msg,\n                            minLength: {\n                                value: 6,\n                                message: numberSID.validation.minlength_msg\n                            }\n                        })}\n                        type=\"text\"\n                        className=\"form-control\" />\n                    <ErrorMessage as=\"p\" errors={errors} name={numberSID.name} />\n                </div>\n            </div>\n            {/* {'state.rsvp.isSIDKTPVerified : ' + state.rsvp.isSIDKTPVerified} */}\n            {\n                state.rsvp.isSIDKTPVerified === false ? (\n                    <React.Fragment>\n                        <div className=\"form-group\">\n                            <label htmlFor={name.name} className=\"col-form-label\">{name.label} {name.required ? (<span className=\"required\">*</span>) : ''}</label>\n                            <div className=\"\">\n                                <input id={name.name}\n                                    name={name.name}\n                                    ref={register({\n                                        required: name.validation.required_msg,\n                                    })}\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                />\n                                <ErrorMessage as=\"p\" errors={errors} name={name.name} />\n                            </div>\n                        </div>\n                    </React.Fragment>) : (<div className=\"text-center text-info\">{infoText}</div>)}\n\n        </form>\n    );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgsourceRoot":""}